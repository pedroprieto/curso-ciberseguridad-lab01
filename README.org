#+TITLE: Seguridad perimetral con Next Generation Firewall
#+AUTHOR: Pedro Prieto Alarcón
#+LANGUAGE: es-es
#+DATE: 20/05/2024
#+LATEX_HEADER: \usepackage[spanish]{babel} \usepackage{sectsty} \usepackage{times} \allsectionsfont{\sffamily} 
#+LATEX_HEADER: \usepackage{fancyhdr} \pagestyle{fancy} \fancyhf{}
#+LATEX_HEADER: \newcommand{\fuenteencpie}{\fontfamily{phv}\fontsize{9}{11}\selectfont}
#+LATEX_HEADER: \rhead{\fuenteencpie \leftmark}
#+LATEX_HEADER: \renewcommand{\footrulewidth}{0.5pt}
#+LATEX_HEADER: \rfoot{\fuenteencpie \thepage}
#+LATEX_HEADER: \cfoot{\fuenteencpie Pedro Prieto Alarcón}
#+LATEX_HEADER: \lfoot{\fuenteencpie 2024}
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,12pt]


* LAB 01: Seguridad perimetral con Next Generation Firewall
Solución de Pedro Prieto Alarcón

También disponible aquí:

https://github.com/pedroprieto/curso-ciberseguridad-lab01

* Instalación del entorno en AWS
** Creación de la VPC y las subredes
Creamos una Red Privada Virtual (VPC) con dos subredes: una pública y una privada.
[[./imagenes/vpc1.png]]
[[./imagenes/vpc2.png]]

- La subred pública tendrá acceso a Internet a través de un Internet Gateway.
- La subred privada no tiene acceso a Internet: solo acceso a la red local.

** Creación de puntos de conexión a Systems Manager en la subred privada
Dado que la subred privada no tiene conexión a Internet, no será posible conectarse remotamente a las instancias creadas en dicha subred. Para solucionarlo, creamos los puntos de acceso (VPC endpoints) para poder conectarnos a través de Systems Manager (fuente: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-ec2.html).

En primer lugar, creamos un grupo de seguridad (firewall) para permitir conexiones entrantes de SSM a los puntos de acceso. Debemos permitir el acceso a través del puerto 443 al tráfico procedente de la subred privada:
[[./imagenes/sg-ssm.png]]

En segundo lugar, creamos los puntos de acceso (VPC Endpoints). Debemos crear tres interfaces, indicando la VPC, subred privada y grupo de seguridad:
- ssm
- ssmmessages
- ec2messages

[[./imagenes/endpointssm1.png]]  
[[./imagenes/endpointssm2.png]]

Repitiendo la operación con los otros dos servicios, tenemos 3 endpoints disponibles:
[[./imagenes/endpoints3.png]]

** Lanzamiento de la instancia cliente en la subred privada
Lanzamos una instancia Ubuntu en la subred privada. Permitimos tráfico ICMP entrante desde la subred pública para comprobar conectividad:
[[./imagenes/cliente-1.png]]

[[./imagenes/cliente-2.png]]

[[./imagenes/cliente-3.png]]

Adicionalmente, asignamos un perfil de instancia para permitir el acceso a SSM:
[[./imagenes/instanceprofilecliente.png]]
[[./imagenes/instanceprofilecliente2.png]]

Comprobamos que nos podemos conectar a la instancia a través de SSM:
[[./imagenes/connectcliente.png]]

Comprobamos que la máquina no tiene acceso a Internet (red privada):
[[./imagenes/connectcliente2.png]]

** Lanzamiento de la instancia de OPNsense
Lanzamos uns instancia OPNSense a través de AWS Marketplace. Elegimos la subred pública y asignamos un grupo de seguridad para permitir el acceso remoto por HTTPS y SSH:
[[./imagenes/opnsense1.png]]
[[./imagenes/opnsense2.png]]
[[./imagenes/opnsense3.png]]
[[./imagenes/opnsense4.png]]

Asignamos una IP pública al interfaz de red, dado que se nos olvidó en el paso anterior:
[[./imagenes/opnsense4.png]]
[[./imagenes/opnsense6.png]]

Comprobamos que podemos acceder a través de la IP pública asignada:
[[./imagenes/opnsense7.png]]
[[./imagenes/opnsense8.png]]

Obtenemos el usuario y la contraseña iniciales de los logs de la instancia:
[[./imagenes/opnsense9.png]]
[[./imagenes/opnsense10.png]]

Y finalmente comprobamos que funciona:
[[./imagenes/opnsense11.png]]

** Configuración de la segunda interfaz de red en OPNsense
A continuación, asignamos una nueva interfaz de red a la instancia de OPNsense y la conectamos a la subred privada. En primer lugar, creamos un grupo de seguridad para permitir el tráfico entrante desde la máquina cliente:
[[./imagenes/opnsense12.png]]

En segundo lugar, creamos la interfaz de red y le asignamos la IP estática 192.168.56.100 y el grupo de seguridad creado en el paso anterior:
[[./imagenes/opnsense13.png]]

Asignamos la interfaz a la instancia OPNsense:
[[./imagenes/opnsense14.png]]
[[./imagenes/opnsense15.png]]

Ya tenemos la instancia OPNsense con dos interfaces de red. Para que todo funcione, en primer lugar hay que desactivar la comprobación de origen/destino de paquetes para que la máquina pueda actuar como router:
[[./imagenes/opnsense16.png]]
[[./imagenes/opnsense17.png]]

A continuación, configuramos la tabla de enrutamiento de la subred privada para que el tráfico por defecto se dirija a la IP 192.168.56.100, la IP interna de OPNsense:
[[./imagenes/opnsense18.png]]
[[./imagenes/opnsense19.png]]

Por último, configuramos OPN sense mediante el asistente:
[[./imagenes/opnsense20.png]]
[[./imagenes/opnsense21.png]]
[[./imagenes/opnsense22.png]]
[[./imagenes/opnsense23.png]]

Y añadimos la regla de permitir tráfico de la LAN:
[[./imagenes/opnsense24.png]]

Comprobamos por fin que el cliente puede navegar a través de OPNsense:
[[./imagenes/opnsense25.png]]
[[./imagenes/opnsense26.png]]

Como diferencia con respecto a hacerlo en VirtualBox/VMWare, he desactivado el servidor DHCP, ya que es proporcionado por la VPC de AWS.

* Desarrollo de la práctica
** Búsqueda por DNS
[[./imagenes/endpoints3.png]]

** Regla MARCA_COM
Regla creada:
[[./imagenes/reglamarca1.png]]

El cliente sigue navegando:
[[./imagenes/reglamarca2.png]]

Como indica el enunciado, la regla se aplica después de la regla por defecto, por lo que no llega a ejecutarse. Tras cambiar el orden:

[[./imagenes/reglamarca3.png]]

Vemos que efectivamente no funciona la navegación, aunque sí el ping:
[[./imagenes/reglamarca4.png]]

** Política restrictiva
Desactivación de reglas:
[[./imagenes/restrictiva1.png]]

No funciona el acceso a Internet:
[[./imagenes/restrictiva2.png]]

Permitir HTTP/HTTPS e ICMP:
[[./imagenes/restrictiva3.png]]

[[./imagenes/restrictiva4.png]]

En este caso *SÍ que funciona* el DNS, ya que la máquina cliente está configurada para resolver DNS en la infraestructura de AWS. Para hacer esta parte de la práctica, cambiamos la configuración DNS en el equipo cliente:

[[./imagenes/restrictiva5.png]]

Comprobamos entonces que no hay resolución DNS:
[[./imagenes/restrictiva6.png]]

Añadimos la regla DNS. El estado actual del cortafuegos es:
[[./imagenes/restrictiva7.png]]

Y el resultado de la navegación a los distintos servicios:
[[./imagenes/restrictiva8.png]]

Es recomendable abrir TCP para DNS por si el tamaño de las respuestas es mayor que el estándar, caso de DNSSEC.

** Intercepción HTTP y HTTPS
Es más recomendable filtrar por DNS que por IP, ya que un sitio puede utilizar IPs dinámicas, cambiar de IP o utilizar diferentes IPs. Además, tal como indica el enunciado, es posible que las IPs soporten diferentes hostings compartidos.

Todavía no es posible acceder a ~marca.com~ ni a ~marcacoches.com~:
[[./imagenes/intercepcion1.png]]

Al desactivar la regla ya funciona la navegación:
[[./imagenes/intercepcion2.png]]

A continuación, configuro el proxy squid. Para ello, instalo la extensión y configuro las reglas NAT. Lo que más me ha costado ha sido descubrir que había que poner los puertos 80 y 443 como "Puerto de destino TCP permitido". No lo he visto en la documentación...

[[./imagenes/intercepcion3.png]]

He creado un certificado CA y lo he importado en la máquina cliente:
[[./imagenes/intercepcion4.png]]

A continuación, he puesto la lista negra y he comprobado la navegación:
[[./imagenes/intercepcion5.png]]

Aquí puede verse cómo se deniega el acceso a ~marcacoches.com~:
[[./imagenes/intercepcion6.png]]

** IDS, IPS
En primer lugar, descargamos las reglas del IDS y reiniciamos el servicio:
[[./imagenes/ids1.png]]

A continuación, lanzamos el primer comando:
[[./imagenes/ids2.png]]

Resultado:
[[./imagenes/ids3.png]]

Segundo comando:
[[./imagenes/ids4.png]]

Resultado:
[[./imagenes/ids5.png]]

El comando intenta ejecutar un código malicioso en el servidor a través de JNDI y LDAP.

Vemos cómo nos deja descargar EICAR:
[[./imagenes/ids6.png]]

Si activamos el IPS, bloquea la petición:
[[./imagenes/ids7.png]]

[[./imagenes/ids8.png]]

** Bloqueo de amenazas en conexiones cifradas e inspección HTTPS
Sin embargo, si descargamos a través de HTTPS no lo bloquea:
[[./imagenes/ids9.png]]

Para solucionarlo, instalamos ClamAV y ICAP en los plugins. Instalamos las firmas de ClamAV y configuramos ICAP:

Registro de ICAP con la detección del virus:
[[./imagenes/ids10.png]]

En el log del proxy solo he encontrado este mensaje:
[[./imagenes/ids11.png]]

* Conclusiones
Práctica muy interesante. Me ha gustado hacerla en AWS, ya que me ha permitido trabajar con una infraestructura con cierta complejidad.

Dentro del mundo cloud, quizá sería más interesante haber utilizado instancias NAT o un [[https://docs.aws.amazon.com/network-firewall/latest/developerguide/what-is-aws-network-firewall.html][Network Firewall]].

Con respecto a OPNsense, ha funcionado relativamente bien, aunque es bastante "sensible": en ocasiones he tenido que reiniciar los servicios (sobre todo en el último apartado), cambiar su orden de arranque e incluso reiniciar la máquina.
